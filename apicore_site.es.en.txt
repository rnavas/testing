Requirements and Marketplace Prioritization

As APICore depends on the Markteplace, the requests have to be made through the ticket office in advance before the start of all Q. Any request once the Q has started has to have a high priority (and well justified) since something from the backlog will have to be deprioritized . To make a request for a requirement, you must load it directly from this url https://mercadolibre.atlassian.net/servicedesk/customer/portal/238/user/login?destination=portal%2F238

Bugs and Marketplace Support

Any malfunction found in any of our APIs must be reported to Jira via this ticket: https://mercadolibre.atlassian.net/servicedesk/customer/portal/97/user/login?destination=portal%2F97

APICore Support

For any query or support that you need from APICore, you must fill out this form: https://docs.google.com/forms/d/e/1FAIpQLSdW00yY4OxkEb0La8WwccyROX4Yu08yBJaEqkqVnNt38uRf2Q/viewform


Additional Apicore Documentation

Know all our terms and expressions by visiting this glossary: ​​https://sites.google.com/mercadolibre.com/apicore/glosario
We share our knowledge and experiences using different services and tools that you can see in these articles: https://sites.google.com/mercadolibre.com/apicore/art%C3%ADculos
Visit this section to learn a little more about our APIs to see our talks: https://sites.google.com/mercadolibre.com/apicore/charlas


What is Feedback?

It represents the qualifications of the counterparties in a sale. It is an opinion about the operation towards the seller/buyer. Not to be confused with an opinion about the product (known as a review). In turn, a rating can be answered (entity known as Reply) or request that it be changed (entity known as Change Request). From the moment a user makes a sale, both parties can already leave their feedback on the transaction. The seller, by qualifying the buyer as positive, is indicating that he has already delivered the product; It is important to remember that this process should only be carried out when it is certain that the product was delivered to the buyer.


Fury feedback api link: https://web.furycloud.io/feedback-api/summary
Github feedback api link: https://github.com/mercadolibre/fury_feedback-api
Datadog feedback api link: https://app.datadoghq.com/dashboard/4z7-m2y-kug

When can a sale (order) be qualified?
The order must be visible and must not have a payment in process. An order that is more than 60 days old since the order was closed cannot be qualified either.

What does the fulfilled field mean?
It is what the user (buyer or seller) indicates as to whether the transaction was completed or not.

What does the rating field mean?
It is what the user (buyer or seller) indicates regarding whether the experience was good (positive), neutral or bad (negative).

What does the reason field mean?
It is what the user (buyer or seller) indicates regarding the reason why the operation did not materialize. It is a required field when the seller qualifies as not completed (fulfilled: false).

What is the deadline to qualify?
You have 60 days from the order visibility date (order.date_closed) for all sites. In the case of a sale of a product that requires manufacturing, it will be 60 days from the date of completion of billing (order.manufacturing_ending_date). Some considerations: You will not be able to qualify negative after the expiration date unless you are the buyer and there is a closed mediation. CBT orders have a period of 100 days to qualify due to the extraordinary delivery times that international shipments usually have.

How long does a user have to change their rating?
You have 90 days from the creation of the feedback. Some considerations: An inactive feedback cannot be modified.

When is a rating visible?
When both parties qualify. When the order expires. When the order is cancelled. When the person receiving the feedback has more than 10% negative ratings.

How many times can I modify a feedback?
The fulfilled or rating field can only be modified once. Note: If the feedback is not specified (fulfilled = false) it can always be modified.

When can a rating be answered?
A user will be able to respond to a rating that was made as long as it is visible.

When can you request a rating change?
A user who received a rating may create a rating change request while the counterparty is within the date to be able to modify it. The counterparty may accept the request and make the change or may reject it (and the rating will not be changed). In the event that the counterparty does not respond to the request during the 5-day period, your qualification will be inactivated. This is reflected in the change_request block of the feedback.

Do these ratings affect the new reputation?
They do not affect the new reputation.

Can you make a rating on a cart purchase?
The feedback cannot be done on a purchase or a pack, but at the API level you can make ratings on each of the orders that were created from the purchase.

What happens if I qualify as not fulfilled (fulfilled false)?
If the qualification is from the seller, the order payments are refunded and the item will be paused if 2 conditions are met: it is from Argentina, Brazil, Chile, Colombia, Mexico or Uruguay. The order is not proximity or the reason is one of the following: OUT_OF_STOCK, UNAVAILABLE_PRODUCT, UNAVAILABLE_PRODUCT_OTHER, MANUFACTURING_PRODUCT_NOT_FINISHED. Clarification: A feedback from the buyer cannot be classified as NOT completed if it is from the lite flow, that is, the purchase made through a user guest.

What are the possible reasons?

Reason: DUBIOUS_BUYER Description: Buyer is unreliable Role: seller
Reason: HIGH_ML_COMISSION Description: Cost per sale is too high Role: seller
Reason: HIGH_TAXES Description: Taxes are too high Role: seller
Reason: SELLER_HOLIDAY Description: I am not operating for holidays Role: seller
Reason: SELLER_OTHER Description: Other reasons Role: seller
Reason: UNAVAILABLE_PRODUCT Description: I do not sell the product requested by the buyer Role: seller
Reason: UNAVAILABLE_PRODUCT_OTHER Description: I don't have the product (for other reasons) Role: seller
Reason: BUYER_NOT_ENOUGH_MONEY Description: Buyer does not have enough money Role: seller
Reason: BUYER_DID_NOT_ANSWER Description: The buyer did not answer the seller's contact Role: seller
Reason: MANUFACTURING_PRODUCT_NOT_FINISHED Description: Do not finish manufacturing the product Role: seller
Reason: SELLER_REGRETS Description: I regretted the sale Role: seller
Reason: UNFRIENDLY_SHIPMENT_POLICY Description: The buyer does not agree with the shipment Role: seller
Reason: SELLER_ADDRESS_WITHDRAWAL Description: The buyer prefers to withdraw personally Role: seller
Reason: WRONG_RECEIVER_ADDRESS Description: The buyer has the wrong shipping address Role: seller
Reason: WRONG_SHIPMENT_COST Description: The shipping cost was wrongly calculated Role: seller
Reason: UNPRINTED_LABEL Description: Could not print the label Role: seller
Reason: SHIPMENT_PROBLEM_OTHER Description: Shipping had some other problem Role: seller
Reason: UNWITHDRAWN_PRODUCT_BY_DELIVER_COMPANY Description: The email did not go through to pick up the product Role: seller
Reason: DENIED_PACKAGE Description: The mail did not accept the package due to its dimensions or weight Role: seller
Reason: DELIVERY_COMPANY_PROBLEM_OTHER Description: The mail had another problem Role: seller
Reason: UNABLE_TO_READ_LABEL Description: The email cannot read the label Role: seller
Reason: BUYER_OTHER Description: Other reasons Role: seller
Reason: BUYER_PAID_BUT_DID_NOT_RECEIVE Description: The buyer paid but did not receive the product Role: buyer
Reason: DESCRIPTION_DIDNT_MATCH_ARTICLE Description: Buyer says that the description does not match the product Role: buyer
Reason: SELLER_DID_NOT_ANSWER Description: The seller did not answer the buyer Role: buyer
Reason: OUT_OF_STOCK Description: I have no stock Role: both
Reason: BUYER_REGRETS Description: The buyer regretted the purchase Role: both
Reason: HIGH_SHIPMENT_COST Description: Shipping costs are too high Role: both
Reason: OTHER_MY_RESPONSIBILITY Description: My responsibility (Other reason) Role: both
Reason: OTHER_THEIR_RESPONSIBILITY Description: Responsibility of the counterparty (Other reason) Role: both
Reason: THEY_NOT_HONORING_POLICIES Description: The policies were not honored Role: both
Reason: TOO_MANY_ORDERS Description: Too many orders gathered Role: seller
Reason: CLOSED_STORE Description: The store is closed Role: seller
Reason: OUT_OF_DELIVERY_AREA Description: Outside the delivery coverage area Role: seller
Reason: DELIVERY_PERSON_PROBLEM Description: Problem with the delivery person Role: seller

Reading
Feedback by id

/feedbacks/feedback_id?caller.id=caller&client.id=client

Feedback by order id

/orders/order_id/feedback?caller.id=caller&client.id=client

Feedback by role

/orders/order_id/feedback/$role?caller.id=caller&client.id=client

Feedback history

/feedbacks/feedback_id/history?caller.id=caller&client.id=client

News
topic
eaa781a304904b9cbbc361bf2a63820c-feedback-public

Look for
Look for

/feedbacks/search?client.id=client&to=user_id&exclude_context_flows=flow1,flow2

Count

/feedbacks/search/count?client.id=client&to=user_id

sweep (scan)

/feedbacks/search?client.id=client&to=user_id&search_type=scan

Feedback ABM
Create

/orders/order_id/feedback?caller.id=caller&client.id=client

edit by id

/feedbacks/feedback_id?caller.id=caller&client.id=client

Edit by order id

/orders/order_id/feedback/$role?caller.id=buyer&client.id=client

edit status

/feedbacks/feedback_id/status?caller.id=caller&client.id=client

ABM by Reply
You can respond to ratings you've received from your counterparties to explain your reasons or to provide additional information.

Create

/feedback/feedback_id/reply?caller.id=caller&client.id=client

Edit

/feedback/feedback_id/reply?caller.id=caller&client.id=client

Change Request ABM
You can request a rating change that you have received from your counterparties.

Create

/feedbacks/feedback_id/change_request?caller.id=caller&client.id=client

edit status

/feedbacks/feedback_id/change_request?caller.id=caller&client.id=client

Extend the term

/feedbacks/feedback_id/change_request/extend_time?caller.id=caller&client.id=client

days to qualify
Read

/feedbacks/days_to_qualify?client.id=client&....

Look for

/feedbacks/days_to_qualify/by_seller?client.id=client&....

Create

/feedbacks/days_to_qualify/by_seller?client.id=client

Deactivate

/feedbacks/days_to_qualify/by_seller?client.id=client&....

testing
test scopes
https://api.mercadolibre.com/feedback/$id?caller.id=$caller_id&client.id=$app_id&scope=test3


What is Order?
It represents the purchase of an item-variation in the marketplace. The order is always for a single item, but it can be multiple units of the same item.

We say item-variation because the purchase is always on the variation of the item, and if it does not have it will be on the item itself.

It does not represent a purchase by mercadopago (aka merchant_orders)

Order-aware payments are only of type "marketplace_order"

To represent said purchase, the order groups information from different APIs:

Shipping

Feedbacks

mediations

payments

users

Vault (for external)

It also centralizes the logic on how to process payments in the purchase.

He mainly participates in the sales and post-sale flow, working closely with the Checkout and MyML team.

It is also a public API with which there are many external integrations to Meli that use it, for this we work closely with the OpenPlatform team.

What are the order statuses?

1) The orders that enter through the "Buy equals pay" flow are created in the “payment_required” state.

At that time they have the following characteristics:

They are not visible to the seller.

Item stock is not discounted.

They do not have the date_closed field set.

They do not have counterparty data.

When the payment(s) are credited for the full amount of the sale, the order changes from the “payment_required” status to “paid”. At that moment:

They become visible to the seller.

The stock of the item is discounted.

The date_closed field is set.

The counterparty data is added.

The notifications of the topic "orders" also begin to be sent.

If all payments are returned, the order is cancelled.


2) Orders that do NOT enter through this flow are created in the "confirmed" status. Since then:

They are visible to the seller.

Item stock is discounted.

The date_closed field is set.

It has the data of the counterparty.

The notifications of the topic "orders"/"created_orders" also begin to be sent.

In the event that payments are made through Mercado Pago and they are credited for the total amount of the sale, the order goes from the "confirmed" status to "paid".

When is an order paid?
When there is money!!


paid_amount >= total_amount(1) + shipping_cost(2) + taxes.amount (3)

(1) price of the item * quantity, in the currency of the order.
(2) cost of shipping, in the currency of the order.
(3) taxes, in the currency indicated in taxes.currency_id

paid amount

It is the money that the buyer paid

The order considers payments in these states:

approved

in_mediation

charge_back: if only if the status_detail is in_process or reimbursed

And for each one add the fields:

transaction_amount

taxes_amount

shipping_cost

Shipping Cost

The shipment may have a different currency than the order, so its cost must be multiplied by the ratio that corresponds to the date of creation.

tax amount

The order persists locally the total taxes that the buyer must pay and the currency of the same.

Coupons

If there is a coupon, its amount must be included in the transaction_amount payment field

different currencies

The total amount is multiplied by the conversion ratio on the payment creation date (internal data of the order).

The ratio is recovered from:

/currency_conversions/search?from=currency1&to=currency2&date=dd/MM/yyyy-HH:mm&complete=true

The 'complete' flag causes it to return all decimal places.

When is an order visible? / When is the stock of the item reduced? / At what point is the date_closed determined?
Buy_equals_pay orders are created with the hidden_for_seller field set to true which determines when a seller can see the order. Buy_it_now orders are already created with the field set to false.

Once it is visible it cannot be hidden, meaning the flag never returns to true.

The orders become visible when the stock is discounted to the item. For orders buy_it_now is the moment the purchase is created, and for buy_equals_pay when it is paid.

In addition, the date is stored in the date_closed attribute, it represents the moment in which the order is visible.

Along with this date, the expiration_date field is also defined, which is the date_closed + number of days that defines feedback based on the site, the product, the vendor and other variables. In addition, the days of manufacturing (or preparation) are added if the item had it configured at the time the order was created.

The expiration_date will always be greater than the date_closed. On this date, it will be analyzed whether the order was carried out (see the following question for more details).


How do I identify a test order?
Test orders have the "test_order" tag.


Can an order be associated with an item that no longer exists?
Yeah. The items have a certain duration, they have a cleaning process for those who do not have activity. Instead, the orders are saved forever, so it is a valid use case that there are purchases whose item was purged (for example, the order with ID 1).

You can find more information about the duration of the items in the following FAQ.

How long is there to pay for an order?
Orders in the 'payment_required' status have 20 days from their creation date to be paid, after that period they will be canceled due to expiration. During the same period, the price for which it was created is respected.

This limit applies to all countries.

Can an order be created if the item is on hold?
It can only be done if it is an order that is generated through a pack split, an internal process triggered by fullfilment or the seller when they determine that the items involved in a Purchase cannot be distributed in the Packs assigned by the calculator. In this process, new Packs are generated with the new distribution of the items, and new orders are created for each of them. This time, as it is an order from a split Pack, we do not validate the status of the item or its stock, since these are previously validated Items.

When is an order completed?
The fulfilled field indicates whether the purchase is completed or not.

It is always created with the value null, which can be interpreted as not being evaluated yet.

Once any of the following events occur, it will have true or false. And it could change N times.

The factors, ordered by priority, are the following:

If the order is canceled it is marked as not fulfilled and nothing can modify it.

If the order has the unfulfilled tag, it is marked as unfulfilled.

If there is feedback from the seller, the fulfillment of the feedback is reviewed and it is marked as completed or not completed as appropriate.

If the order is a reservation (see the tags) and there is no feedback from the seller, everything is canceled, even though the seller pays. It is then marked as unfulfilled.

If there is a shipment, its status is reviewed (delivered or not) and it is marked as completed or not completed as appropriate.

If there is no feedback, no delivery, but the order expired:

If it is 'paid' or 'confirmed' it is marked as completed.

Otherwise, it is assumed not completed.


When an order is cancelled?
An order is canceled when it has the canceled status. This is a final state.

The detail of the cancellation can be obtained from the cancel_detail node. There you can obtain information on the reason for cancellation, the requesting app_id and the date on which it was made.

To cancel an order it is necessary that you do not have credited payments.

If an order is canceled then it is not completed, as reflected by the fulfilled attribute. But it does not necessarily happen the other way around, there may be orders that are not completed and are not cancelled.

Why is an order pending_cancel?
An order is in the pending_cancel state when it is in the process of being cancelled. This is because the payment(s) are in the process of being returned (that is, there was an attempt to refund). Once all your payments have been effectively returned, the order transitions to the canceled status.

In the event that the attempt to refund any of the payments fails, it remains retrying until the return is successful.

What are the causes of cancellation?
Related to mediations

mediations: mediations cancel the order

Related to tax

fiscal: the order was canceled due to a fiscal problem

fiscal_seller_forbidden: The seller is prohibited from issuing notes by SEFAZ

fiscal_invalid_buyer_ie: The IE (State Registration) of the buyer was not informed, not registered, not active in the state, invalid or not related to the CNPJ informed

fiscal_no_fiscal_stock: Applicable only to Full. Tax coverage is missing and for some reason the product was available for sale/transfer/return.

fiscal_buyer_forbidden: SEFAZ denied the buyer to issue an invoice for fiscal irregularities

fiscal_invoice_referenced_have_other_cnpj: The CNPJ of the referenced invoice does not match the CNPJ of the current invoice

fiscal_pending_integration: It can occur for many reasons, the main one is when there is a V3 cart where an order is canceled and the other authorized orders remain in pending integration due to a canceled order.

fiscal_invalid_recipient_name: The name of the recipient does not match the SEFAZ record and the invoice is not authorized.

fiscal_sefaz_issuer_cnpj_not_enabled: CNPJ not enabled in SEFAZ

fiscal_sefaz_tax_system_divergence: The seller's tax system differs from the SEFAZ records

fiscal_items_with_invalid_ncm: Some items have an invalid NCM

fiscal_seller_invalid_ie_substitute: IE Invalid Substitute Tax (IEST)

Related to the buyer

buyer_repentant: the buyer repented

feedback_buyer_repentant: there is feedback from the seller with the reason buyer_regrets

feedback_buyer_dubious: there is feedback from the seller with the reason dubious_buyer

feedback_buyer_other: there is feedback from the seller with the reason other_their_responsibility

feedback_buyer_not_enough_money: there is feedback from the seller with the reason buyer_not_enough_money

feedback_buyer_address_withdrawal: there is feedback from the seller with the reason seller_address_withdrawal

buyer_cancel_express: there is a mediation with the status cancel_purchase

Related to fraud

fraud: there is a fraud tag in the order

fraud_money_control: there is a fraud_money_control tag in the order

fraud_seller: seller fraud

fraud_buyer: buyer fraud

fraud_ato: fraud from hacked/stolen account.

fraud_auto_offer: fraud when the buyer and the seller are the same person.

fraud_label: indicates that the cause of cancellation is "fraud label" to differentiate the experiences before a cancellation

Related to the item

item_status_closed: the item is closed, because it is not active, expired or closed

item_status_pending: the item is paused

item_out_of_stock: there is no stock for the item

item_variation_out_of_stock: there is no stock of the variation of the item

item_variation_unavailable: a variation that does not exist was indicated in the creation

item_variation_needed: the item has variations and one was not indicated in the creation

item_variation_nonexistent: a variation of the item that does not exist was indicated

Shipping related

shipment_creation: shipment creation failed

shipment_unfulfilled: shipping (fulfillment) I cancel the order

shipment_service_unavailable: low shipment coverage at origin/destination

shipment_agency_unavailable: the shipping destination agency is inactive

feedback_shipment_high_cost: there is feedback from the seller with the reason high_shipment_cost

feedback_shipment_wrong_cost: there is feedback from the seller with the reason wrong_shipment_cost

feedback_shipment_unprinted_label: there is feedback from the seller with the reason unprinted_label

feedback_shipment_other: there is feedback from the seller with the reason shipment_problem_other

feedback_shipment_policy: there is feedback from the seller with the reason unfriendly_shipment_policy

feedback_shipment_wrong_address: there is feedback from the seller with the reason wrong_receiver_address

shipment_pack: there was a problem with shipping on a cart order

Related to delivery

feedback_delivery_unwithdrawn: there is feedback from the seller with the reason unwithdrawn_product_by_deliver_company

feedback_delivery_bad_label: there is feedback from the seller with the reason unable_to_read_label

feedback_delivery_denied: there is feedback from the seller with the reason denied_package

feedback_delivery_other: there is feedback from the seller with the reason delivery_company_problem_other

Related to the seller

seller_blocked: seller does not accept orders (user status.sell.allow field is false)

seller_inactive: the seller is not active (the user status field is not active)

seller_timeout_proximity: the seller did not respond to the proximity request.

seller_request_commercial_issues: the seller asks Meli to cancel the sale due to commercial issues.

feedback_high_comission: there is feedback from the seller with the reason high_ml_comission

feedback_high_taxes: there is feedback from the seller with the reason high_taxes

feedback_seller_holiday: there is feedback from the seller with the reason seller_holiday

feedback_unavailable_product: there is feedback from the seller with the reason unavailable_product_child or unavailable_product_other

feedback_out_of_stock: there is feedback from the seller with the reason out_of_stock

feedback_did_not_try_contact: there is feedback from the seller with the reason seller_didnt_try_to_contact_buyer

feedback_other_my_responsibility: there is feedback from the seller with the reason other_my_responsibility

feedback_not_honoring_policies: there is feedback from the seller with the reason they_not_honoring_policies

feedback_product_not_finished: there is feedback from the seller with the reason manufacturing_product_not_finished

feedback_seller_repentant: there is feedback from the seller with the reason seller_regrets or repentant_seller_other or seller_other

feedback_too_many_orders : there is feedback from the seller with the reason too_many_orders

feedback_closed_store : there is feedback from the seller with the reason closed_store

feedback_out_of_delivery_area : there is feedback from the seller with the reason out_of_delivery_area

feedback_delivery_person_problem : there is feedback from the seller with the reason delivery_person_problem

internal processes

expired_order: the order was canceled because payment was not made before the maximum period of 20 days

expired_high_concurrency_order: it was canceled because no payment was made before the expiration period for the items with the livestream_elegible tag (between 1 and 10 minutes approximately) of high demand

pack_creation_error: there was an error creating the pack in a cart order

pack_unknown: the reason for canceling the pack of a cart order cannot be determined

bug: the order was canceled due to a bug associated with it

unknown: Unable to determine the reason for cancellation

payments_capture_fail: Failed to capture payments for the order as the order gave error 1101

pack_splitted: the cart order was canceled because the purchase was split

feedback_unknown: there is vendor feedback associated with the order, for which a reason cannot be determined

Complete list of causes

If the payment is returned, is the order cancelled?
If it is of the buy_equals_pay type, it is only auto-cancelled if it was visible. This implies that the purchase was paid for, so if the payment is returned, the purchase is not successful.

If the order is of the buy_it_now type, it will also be canceled, so it cannot be paid again.


Does the stock increase when an order is cancelled?
When an order is canceled, the stock of the item is increased, but the following conditions must be met:

The order has to be visible, that is, already, I discount stock before.

30 days have not passed since the expiration of the order.

The order is canceled by the buyer (buyer_cancel_express or buyer_repentant causes).

The order is NOT canceled by shipment_unfulfilled. This cause represents that there was a problem with the stock in the fulfillment center and you cannot complete the sale or replenish the stock.

None of the payments are returned via the Buyer Protection Program. If BPP is applied it is very difficult to determine with the data what actually happened. Since most of the time something happens with the product, it is decided not to replenish the stock.

There is no feedback from the seller with the reasons unavailable_product_other or out_of_stock. Here the same user tells us that he could not complete the sale due to lack of stock, so it does not make sense to replace it.

In any case, if when trying to modify the stock you receive a 400, 403 or 404 from items-api, it will not be retried.

Why was a payment cancelled?
Every time orders is called to cancel a payment, the reason is passed to payments so that it persists in its metadata.

Mercadopago documentation

Why is an order 'buy equals pay' (B=P)?
This is the logic today:

The purchase has a guarantee

The buyer does NOT have the internal tag government_buyer

The item is not from Meli-Live (the item has the tag live)

The seller has the mark that he needs immediate payment. Retrieves it from the user's json in user.status.immediate_payment or status.sell.immediate_payment.required. In the order status_detail.status_code will be seller_restriction

The buyer has the mark that needs immediate payment. Retrieves it from the user's json at user.status.buy.immediate_payment.required. In the order status_detail.status_code will be buyer_restriction

The item is marked as needing immediate payment. Retrieves it from the json item.tags.contains('immediate_payment'). In the order status_detail.status_code will be item_price_restriction

The command was created by purchases-api, so it belongs to a package of a purchase.

Another reason, in sites where there is Mercado Pago, a B=P order can be generated if the user exceeds the limit defined in the purchase thresholds.


How are payment updates processed?

How is the flow in deferred shipments?
It is a containment flow when there are problems creating online shipments.



How are the flows of multiple payments?

How is the relationship with the other entities?

What is the Teradata table?
In Teradata there are the following tables related to the Orders entity:


WHOWNER.BT_ODR_PURCHASE_ORDERS

WHOWNER.BT_ODR_ORDER_ITEMS

WHOWNER.LK_ORD_ORDER_TAG


If you need to add information or have any questions, you can send an email to bi@mercadolibre.com.

How do I distinguish a direct order from a cart order?
An order is cart if it has a pack_id. The packId can be obtained by reading the order and is also included in the new order.

Can an order be in a "paid" status and have a shipment cancelled?
The status of the orders depends on your payments, the orders contemplate purchases made that do not have shipping, therefore their status does not depend on shipping. If a shipment is cancelled, it is shipping's responsibility to cancel the order, not the order itself.

How is the relationship between user information and billing info?
The billing info is a piece of data used to create the purchase that reports the Checkout, which retrieves the information from Seller Invoices resources.

At the API level there is no control of where it comes from or relationship with any other entity.

readings
Read Order

/orders/$order_id

Read orders (bulk)

/orders/bulk/read

read discounts

/orders/$order_id/discounts

read billing info

/orders/$order_id/billing_info

read product info

/orders/$id/product

News
From orders we maintain 2 types of news:

BigQueue that can use any Mercado Libre API

External feed for integrators

There is only one public topic of orders for all of MeLi.

Changes in the GET JSON are reported to orders

Orders older than 12 months are not notified.

order topic
cbead41f2a5849b5a5be64df0f3521d2-orders-orders

Billing info GET JSON changes are reported

Orders older than 24 months are not notified.

Billing info topic
orders-billing_info.orders-api

Changes to product GET JSON are reported

Orders older than 24 months are not notified.

Product Topic
orders-product.orders-api

Discounts Topic
discounts-applied-by-order.purchases-api

For external people there are external feeds to which they must subscribe

Orders older than 6 months will not be notified.

external feeds
Through a Fury/Architecture service from orders we maintain the following feeds:

orders_v2: post all order news visible to the seller

ordersbuyer: publishes all news of orders for the buyer


Search
Currently only created orders are saved up to 12 months. Neither are the orders canceled by the buyer

Search by parameters

/orders/search?buyer|seller=buyer_id&caller.id=buyer_id|seller_id&client.id=app_id

search by json

/internal/orders/search

DEPRECATED
ABM of orders
Create

/orders?caller.id=$buyer_id&client.id=$app_id

Edit
You can edit the order as admin, buyer or seller. And depending on it, you can do different things.

admin

/orders/$order_id?caller.scopes=admin&client.id=$app_id

buyer

/orders/$order_id?caller.id=$buyer_id&client.id=$app_id

seller

/orders/$order_id?caller.id=$seller_id&client.id=$app_id

Cancel
admin

/orders/$order_id?caller.scopes=admin&client.id=$app_id&cause=$cause&restock=false/true"

buyer

/orders/$order_id?caller.id=$buyer_id&client.id=$app_id"

seller

/orders/$order_id?caller.id=$seller_id&client.id=$app_id&cause=$cause&restock=false/true

shipping ABM
Orders acts as a proxy to create shipments to avoid news problems. Being in the middle allows you to add validations and/or complement the json to create the shipment with data from the order.

Create

/orders/$orderId/shipping?caller.id=$buyerId&client.id=$appId

Edit

/orders/$orderId/shipping?caller.id=$buyerId&client.id=$appId&matchShippingFormat=true

Cancel

/orders/$orderId/shipping?caller.id=$buyerId&client.id=$appId

ABM payments
Orders acts as a proxy to create payments to avoid news issues. Being in the middle allows you to add validations and complement the json to create the payment with data from the order.

Payment methods available
Before creating a payment, you must see the available means of payment with this Payments resource


/users/$buyer_id/accepted_payment_methods

Create

/orders/$order_id/payments?caller.id=$buyer_id&client.id=$app_id

Cancel

/orders/$order_id/payments?client.id=$app_id&caller.id=$buyer_id

Return (or refunds)

/orders/$id/payments/refund?client.id=$app_id

partially return

/orders/$id/payments/refund/partial?client.id=$app_id

Capture

/orders/$order_id/payments/capture?client.id=$app_id

pickup ABM
Pickup in Store (PUIS) is when the buyer chooses a seller's location to pick up the purchase. Here also orders acts as a proxy.

Create

/orders/$order_id/pickup?caller.id=$buyer_id&client.id=$app_id

Edit

/orders/$order_id/pickup?caller.id=$buyer_id&client.id=$app_id

Cancel

/orders/$order_id/payments?client.id=$app_id&caller.id=$buyer_id

tag ABM
In the orders there are two sets of tags.

external
In the json they are called tags and they can be seen by everyone. Only the seller or an admin can use these resources. You cannot add more than 10 tags, it cannot have more than 50 characters and the tags are prohibited:

not_delivered

not_paid

pack_order: cart order

high_concurrency: high concurrency item order (for example livestreaming)

reservation: reservation order

contract: order of a service contract

supermarket: supermarket order

3x_campaign: order belonging to the 3x cellular campaign

subscription: order a subscription

mshops: order created by channel mshops

proximity: order created by proximity marketplace channel

mp-channel: order created by channel of mp-channel

automatic_variation: the command that designated a variation automatically

test_order: test order (both parties must be test users)

catalog: order created by an item listed by catalog (aka PDP)

unfulfilled: order that is not fulfilled

Add Tags

/orders/$order_id/tags/$my_tag?caller.id=$seller_id&client.id=$app_id

Delete Tags

/orders/$order_id/tags/$my_tag?caller.id=$seller_id&client.id=$app_id

Retrieve the tags

/orders/$order_id/tags?caller.id=$seller_id&client.id=$app_id

internal
In the json they are called internal_tags and can only be seen in the get to /internal/orders/$id.

Only enabled clients can add/remove tags.

add tags

/internal/orders/$order_id/tags/$my_tag?client.id=$app_id

delete tags

/internal/orders/$order_id/tags/$my_tag?client.id=$app_id

List of possible internal tags
auto_purchase

ads

fraud_money_control

fraud-no-cash-advance

paused

not_prepaid

shipment_cost_refunded

fee_bonused

meli_warranty

invoice_authorized

invoice_canceled

invoice_forbidden

invoice_needs_review

invoice_disabled

return_opened

return_closed

return_cancelled

return_on_going

kyc_required

without_bpp

Tag Paused
This, in addition to being informative in the order, it will block any action that the buyer can do, and will cancel any payment created by MP when the news of the same is processed.

billing info
Billing info is a block of the order with data that is used to bill it.

It is the responsibility of the API clients to complete such information. The API does not retrieve data from other API's to complement the available data

Edit
It is internal, it is currently handled from checkout to add billing information to the order.


/orders/$order_id?caller.id=$buyer_id&client.id=$app_id

Stored data
It is important to note that these data are those recommended by Orders clients, but in no case do we validate them from the API or check their consistency.

There will only be info from MLA and MLB. Although the other sites are supported, we do not have documentation on the types of data that are received.

MLB Natural person
FIRST_NAME: the name of the buyer

LAST_NAME: the last name of the buyer

DOC_TYPE: the type of document

DOC_NUMBER: the document number

ZIP_CODE: the buyer's zip code

STREET_NAME: the street name of the buyer's billing address

STREET_NUMBER: the street height of the buyer's billing address

Possible values: any string, "SN" for street cases without number

COMMENT: extra comment about the buyer's billing address

STATE_NAME: state of the buyer's billing address

CITY_NAME: city of the buyer's billing address

MLB Legal Entity
BUSINESS_NAME: Name of the legal entity that buys

TAXPAYER_TYPE_ID: position of the legal entity before VAT

Possible values: "Taxpayer" or "Não contributore"

STATE_REGISTRATION:

DOC_TYPE: the type of document

DOC_NUMBER: the document number

ZIP_CODE: the buyer's zip code

STREET_NAME: the street name of the buyer's billing address

STREET_NUMBER: the street height of the buyer's billing address

Possible values: any string, "SN" for street cases without number

COMMENT: extra comment about the buyer's billing address

STATE_NAME: state of the buyer's billing address

CITY_NAME: city of the buyer's billing address

MLA Natural person
FIRST_NAME: the name of the buyer

LAST_NAME: the last name of the buyer

DOC_TYPE: the type of document

DOC_NUMBER: the document number

ZIP_CODE: the buyer's zip code

STREET_NAME: the street name of the buyer's billing address

STREET_NUMBER: the street height of the buyer's billing address

Possible values: any string, "SN" for street cases without number

COMMENT: floor of the buyer's billing address

STATE_NAME: state of the buyer's billing address

CITY_NAME: city of the buyer's billing address

MLA Legal entity
BUSINESS_NAME: Name of the legal entity that buys

TAXPAYER_TYPE_ID: position of the legal entity before VAT

Possible values: "Monotribute", "Registered Responsible VAT" or "Exempt VAT"

STATE_REGISTRATION:

DOC_TYPE: the type of document

DOC_NUMBER: the document number

ZIP_CODE: the buyer's zip code

STREET_NAME: the street name of the buyer's billing address

STREET_NUMBER: the street height of the buyer's billing address

Possible values: any string, "SN" for street cases without number

COMMENT: floor of the buyer's billing address

STATE_NAME: state of the buyer's billing address

CITY_NAME: city of the buyer's billing address

DOC_TYPE's
MLA

ID

CUIT

MLB

CPF

CNPJ

MLC

RUT

OMC

DC

EC

TIN

MLV

IC

R.I.F.

Passport

MLU

IC

RUT

MPE

ID

EC

product info
Additional details about the sold product instance of the order.

For all requests submitted below the caller.id must be that of the buyer or seller, and receive a clientId. If you need to use the editing resources beforehand, you must register on a whitelist (send a request through the support channel).

Read

GET /orders/$id/product?caller.id=$buyer_id&client.id=$app_id



Create

/orders/$id/product/attributes?caller.id=$buyer_id&client.id=$app_id

Edit

/orders/$id/product/attributes/$attribute?caller.id=$buyer_id&client.id=$app_id

Delete

/orders/$id/product/attributes/$attribute?caller.id=$buyer_id&client.id=$app_id

useful links
Order Runbook.

Orders metrics.

Interaction with Payments.

Payments.

Coupons.

Market Coins (Meli Coins, MCoins).

testing
test scopes
https://api.mercadolibre.com/orders/$id?caller.id=$caller_id&client.id=$app_id&scope=test3

Use test environments of other API's
/beta/payments/

What is Pack?
It represents a shopping cart box, it can have one or more orders from the same or from different vendors.

The pack always belongs to a purchase and always has an associated shipment (if it was correctly populated).

This entity exists to be able to create a single shipment for multiple orders.

Orders associated with a pack do not have a discriminated shipping cost.

Additional Information
He mainly participates in the sales and post-sale cart flow, working closely with the Checkout and MyML team.

What are the pack states?
The statuses of the pack reflect the populated level of the pack to know when it is ready to be sent.


What are the population batch flows?

What are the release batch flows?

What happens if there is an error in the popular packs?

What are the return flows?

How are the packs cancelled?
As explained in the previous presentation, when a payment for an order of a pack is returned, it analyzes the status of the shipment, if it has not yet been dispatched or the order has not been mediated, the cancellation of the rest of the orders is triggered, otherwise it is not canceled the rest of the orders but the total shipping cost is always returned.

With which a pack cannot be canceled directly, you have to look for all the orders you have and return your payments.

Or when the buyer cancels the purchase before paying for it.

What are the possible causes of cancellation?
buyer: the buyer does it via MyMl because he regretted the purchase.

expired: the purchase canceled itself because more than 20 days passed without being paid.

creation_error: there was some problem populating the pack.

seller: all orders stopped being paid (all payments were returned)

shipping: the shipment could not be delivered.

splitted: the pack was divided into N packs

ratio_exceeded: a large part of the pack orders were cancelled, making the rest of the pack no longer viable.

Can an item be added to a created pack?
A new order cannot be added to an existing pack.

But it can happen that a pack is divided into several if only if it has several orders. The new packs are moved the indicated orders of the original pack

This is allowed because sometimes the boxes are too small or fragile items are handled.

How is the relationship with the other entities?

Split
What is it?

In case you need more details, we suggest:

Talk found in the following Link!

Review the document with technical details: link.

Can I do a split N times to the same pack?
No! Once it is confirmed that the Pack Split has been carried out correctly in N children, the Split cannot be done again on the same Pack, since we proceeded with its cancellation.

Partial Cancellations
It is the cancellation of an order that does not necessarily imply the cancellation of the entire pack.

Partial Refunds
It happens when an order can be delivered but not in its entirety (due to lack of stock, difference in weighing, etc.). More information here.

What do we return?
Prior to the appearance of Partial Cancellations, any Pack that had problems with at least one item or an Order was COMPLETELY cancelled.

This situation generated a lot of friction in the purchase flows of Supermarket and Full, where a purchase with many items, in many cases would have some missing and for this reason we would not want to stop delivering the rest of the products to the buyer.


The objective of Partial Cancellations is to reduce said frictions, always keeping in mind the following premises:

Recover as much as possible without the buyer putting up money.

Tell the buyer that it was returned clearly.

That Meli does not lose much in financing the extra shipping costs.

item or full order

What happened? - The requested product is out of stock, was paused, damaged or for another reason.

What do we do? - Remove the item|order from the pack to be able to dispatch


item or partial order

What happened? - There is not enough stock of the requested product or one of them is damaged.

What will we do? - Depending on the scenario, an order will be created for fewer units.


Differences in weighable products

What happened? - A weighable product that was charged for X weight but the actual quantity shipped is less.

What will we do? - If it weighs more, no extra will be charged. Otherwise, if it weighs less, the silver difference will be returned without canceling the order.

When do we make a partial cancellation?
When creating the order

During the populated process, Purchases is creating orders for all the items in the Pack, but some of those Items cannot create their order, due to lack of stock or being paused, among others.

This error applies to both the full item and partial item use cases.

At this point we have no orders or shipments.


When paying the order

The pack orders were already created but upon receiving the money it was canceled because it did not meet certain validations

This moment applies for the full order or partial order use case

At this point all the orders and their shipment already exist.


When packing the shipment

The pack is already in the released state, with which everything remains in the hands of the seller or shipping. When the package is being physically prepared, looking for the products, one of them is missing, has a problem or weighs less than what was charged.

This moment applies to the full order or partial order use case.

What transitions between states will a Pack undergo?
In any of the aforementioned scenarios, the Pack state will transition to an ERROR state, which will be an intermediate state where it will be recovered.

From there you can:

Successfully recover -> Transitioning to FILLING

Do not recover -> Transitioning to PENDING_CANCEL

What are the Recovery Strategies?
At the time of creating a Purchase, it must be determined what will be the recovery strategy that your Packs will have.

These recovery strategies will be 2 at first:

NONE -> In the event of an error, the entire pack is cancelled.

"packing_strategy": "release_all_recover_none"


RATIO -> In the event of an error, it is evaluated whether it should be recovered or not. This new strategy will be in charge of trying to recover the Packs.

"packing_strategy": "release_all_recover_ratio"


How is the Recovery Strategy determined?
If the client, when creating the purchase, sends the packing_strategy attribute in the json.

If the purchase is from proximity marketplace the strategy will be release_all_recover_none. These purchases are not compatible with partial cancellations.

If the purchase is from MLA and one of the vendors is MELI (PL or 1P), the strategy will be release_all_recover_none.

If the purchase is destined for an agency (destination.address_id == null) the strategy will be release_all_recover_none.

If the purchase is from MLA, MLB or MLM the strategy will be release_all_recover_ratio.

If the above conditions are not met, the strategy will be release_all_recover_none.

How is the Recovery Ratio determined?
When trying to recover the Pack, if your recovery strategy is by RATIO, we will take the following measures:

X: We will calculate the cost of all those items that could not be created.

And: We will calculate the cost of all those Pack orders that have been cancelled.

Z: We will calculate the cost of all successful Pack items / orders.


Based on these 3 values, we will perform the following calculation:

Ratio = (X + Y) Conflicting Items or Orders

(X + Y + Z) Total items


Finally, we will verify if the resulting Ratio exceeds the defined limit, which was initially defined at 20%.

That is, if Ratio > 0.2 -> We cancel the ENTIRE Pack due to CREATION_ERROR.


This Ratio is configurable by site and within the site by cart type (super or gm) so different Ratios can be configured between these divisions.

What is a Trash Pack?
Each pack that can be salvaged will have a unique 'trash pack' associated with it.

A trash-pack is a pack in which everything that had problems is going to be left there, just like a garbage can.


Her CARACTERISTICS:

It will contain all the items that could not be created.

It will contain all the orders that could not be paid, or that having been paid, were canceled for some reason.

It will contain the first shipment to be canceled if a recoverable error occurred post creation of the shipment.

It will contain the snapshot_id and option_hash of the original submission in its configuration.

Born in status pending_cancel. It will transition to canceled when the new shipment (shipping associated with the parent pack) is dispatched, delivered or cancelled.

Its status_detail is partially_cancelled.

He will be an only child. That is, a pack can have a single Trash Pack.

How does the recovery of a Pack work internally?

readings
package

/packs/pack_id?caller.id=caller.id&client.id=client.id

Order as a pack
You can use the resource to read packs with order id as long as it does not belong to a pack

The data will adjust as best as possible to each one. More information in this document.

Config of a pack

/pack/pack/config?caller.id=caller&client.id=client

family of a pack

/pack/pack/family?caller.id=caller.id&client.id=client.id

response states
403 - forbidden - Callers that are not authorized to read the pack.

403 - not_identified_application - Api-calls without client.id as query param.

403 - not_identified_user - Api-calls without caller.id as query param or caller.id with null value.

404 - not_found - Api-calls with no pack id in URL or wrong pack id.

404 - pack_not_found - Pack not found.

404 - pack_without_family - If we ask for a family pack which it does not have.

News
topic
cbead41f2a5849b5a5be64df0f3521d2-orders-packs

Look for
Search by Query String (DEPRECATED)

/purchases/search/[recent|archived]?seller=seller_id&caller.id=seller_id&client.id=app_id

Search via JSON

/users/$seller_id/packs?client.id=$app_id&caller.id=seller_id&cbt=true/false

custom filters

/internal/packs/$pack_id/custom_filters?caller.id=$seller_id&client.id=$app_id 'has_unread_messages':true,'other_filter":false

Cancellations and Partial Refunds
picking

/packs/$id/orders/picking

picking simulation

/packs/$id/orders/picking/simulate

Split
Distribution to Son pack

/packs/$id/split?caller.id=caller.id&client.id=client.id


/shipments/shipmentId/split

Dispatch mode of a pack
A pack can have different types of dispatches. The normal thing is an office with shipping, but we began to support packs without shipping. An example case is in which the purchase is made up of intangible items (for example buying several software licenses), in which case there is nothing to send by mail.

The dispatch mode of a pack is indicated within the dispatch node, which can be seen by doing a GET to the pack.

If the pack has shipping, its "mode" will be "shipping", if it does not have shipping, it will be "none". If the dispatch mode is "shipping", the "id" will be the id of the shipment.

useful links
Runbook Purchases.

Purchasing Dashboard.

Split Order Guide.

Pack split.

Partial cancellations.

Payments.

testing
test scopes
https://api.mercadolibre.com/packs/$id?caller.id=$caller_id&client.id=$app_id&scope=test3

Use test environments of other API's
/beta/payments/

What is pickup?
It is an entity that is created when a buyer decides to pick up a product at a branch and is created using information from the order and the associated branch.

Thanks to this API it is possible to know from what date a product will be available for withdrawal, in which branch it will be available and who will withdraw it.

Additional Information
This application is present in the sales and post-sale flows, mainly in the CHO and MyML teams. Next we present a low level document about the internal functioning of it.

links:

Github: https://github.com/mercadolibre/fury_pickups-api

Fury: https://web.furycloud.io/pickups-api

Datadog: https://app.datadoghq.com/dashboard/25s-wwa-k96?from_ts=1669381276637&to_ts=1669384876637&live=true

Can any seller use the branch withdrawal function?
They must register a store to be able to use the functionality.

Can any item be marked as available for pickup at the branch?
Yes, the only restriction is that the item must be associated with the branch.

What are the states of a pickup?
ACTIVE: It is the initial status of the pickup.

READY FOR PICKUP: It is presented when the term defined in the availability_time_in_hours field expires.

DELIVERED: It occurs when the seller indicates that he has already delivered the order but the buyer has not yet confirmed.

FINISHED: It is presented when both parties confirm that the order was delivered.

Is it possible to change the withdrawal date at the branch?
If possible, it can be advanced or delayed.

What happens if the order related to the pickup is cancelled?
The pickup will go to the INACTIVE status and once the agreed withdrawal date has been reached, it will not go to the READY_FOR_PICKUP status.

Is it possible to delete a pickup?
Yes, this will change the status of it to INACTIVE.

Does it have an additional charge to assign pickup to order?
No.

Can a pickup have several orders associated with it?
The API is not yet prepared to tolerate it, nor can it be associated with a pack.

At the moment only one order can be assigned to a pickup.

How do you configure a pickup?
First of all, to configure a pickup, both the store and the item(s) must be previously registered.

Once this is done, the next step is to associate an item to a store (all use of stores and relationships with items is enabled only for a group of whitelisted sellers).

Finally, with the associated item the pickup is created.

Reading

/pickups/pickup_id?access_token=access_token

pickup ABM
Create

/internal/pickups?client.id=client

Modify (for external)

/pickups/pickup_id?caller.id=caller_id&client.id=client

Modify (for internal)

/internal/pickups/pickup_id?client.id=client

Eliminate

/internal/pickups/pickup_id?client.id=client

News
topic
pickup.stores-api

What is a purchase?
A purchase is a representation of a cart purchase, it is a higher abstraction of purchase orders.

Imagine that you have a supermarket cart with several bags of products. The cart is the purchase (purchase), each bag would be a package (pack) and each product is a purchased item (order).

Vendors of a purchase do not have access to the purchase but only to the portions of their packs within the purchase (a pack can have many vendors)

Additional Information
The main teams we interact with in handling Purchases are Checkout, Carts Frontend, MyML, Splitter and Payments.

What are the purchase statuses?

What are the online flows?

What are the population batch flows?

What are the release batch flows?

What happens if there is an error in the popular purchase packs?

What are the return flows?

What is the maximum number of packs that a purchase can have?
The maximum number of Packs in a Purchase is 50. Each pack can have 1 or more orders.

How many days do I have to pay for a purchase?
A purchase must be paid (transition to paid status) within 20 days after its creation, otherwise it is canceled by expiration.

Do sellers have access to the purchase?
No, purchase is the view of a cart purchase for the buyer. Sellers that are part of a purchase have access only to their packs, and not to all of them, but to a partial view of their orders within the pack (since the same pack can be shared between different sellers).

How are purchases cancelled?
For a purchase to be cancelled, all its packs must first be cancelled. There are no canceled purchases with NOT canceled packs, just as a pack is not canceled until all its orders are cancelled.

What are the possible causes of cancellation?
buyer: the buyer cancels via MyML.

expired: the purchase canceled itself because more than 20 days passed without being paid.

creation_error: there was some problem populating the pack.

seller: all orders stopped being paid (all payments were returned).

shipping: the shipment could not be delivered.

mix: the purchase packs were canceled for different reasons and, therefore, the reason for cancellation of the purchase is NOT unique.

How is the relationship with the other entities?

What is the Teradata table?
Teradata contains the following tables related to the Purchases/Packs entity:

WHOWNER.BT_CRT_PUCHASES

WHOWNER.BT_CRT_PACKS

WHOWNER.BT_CRT_PURCHASES_PACKS_ITEMS

readings
Get Purchase

/purchases/purchase?caller.id=caller&client.id=client

Get Billing Info

/purchases/purchase/billing_info?caller.id=caller&client.id=client

Get Payments

/purchases/purchase/payments?caller.id=caller&client.id=client

News
topic
cbead41f2a5849b5a5be64df0f3521d2-orders-purchases

searches
Search Purchases

/purchases/search?buyer=buyer_id&caller.id=caller&client.id=client

Search Purchases via JSON

https://internal-api.mercadolibre.com/users/$buyer_id/purchases?caller.id=buyer_id&client.id=app_id

ABM Purchase
Create

/purchases?caller.id=caller&client.id=client

Edit

/purchases/purchase?caller.id=caller&client.id=client

Cancel

/purchases/purchase?caller.id=caller&client.id=client

ABM Payments
Purchases acts as a proxy for the splitter to manipulate your payments.

Create

/purchases/purchase/payments?caller.id=caller&client.id=client

Cancel all payments

/purchases/purchase/payments/return?caller.id=caller&client.id=client

ABM Tags
Create

/purchases/purchase/tags/tag

Eliminate

/purchases/purchase/tags/tag

useful links
Runbook Purchases.

purchasing dashboard

Split Order Guide.

Pack split.

Partial cancellations.

Payments.

Coupons.

Market Coins (Meli Coins, MCoins).

testing
test scopes
https://api.mercadolibre.com/purchases/$id?caller.id=$caller_id&client.id=$app_id&scope=test3

Use test environments of other API's

/beta/payments/

What is item reservation?
It is the api in charge of guaranteeing during the purchase process the correct granting of the purchased unit by reserving it in advance, thus preventing purchases processed as B=P from being canceled at the time of payment due to lack of stock, thus improving the shopping experience for the user.

This behavior is very useful for massive purchase events, offers, etc. Using this mechanism, we replace the user's negative experience of buying and having it canceled a few seconds later due to lack of stock, by notifying them in advance of the lack of stock of the product.

activate control
Enable items without variation

item/:itemId/stock

Enable item with variation

/item/:itemId/variation/:variationId/stock

Enable all stock per item

/item/:itemId/stock/all

Enable item ignoring variations

/item/:itemId/stock/ignore-variations

disable control
item stock

/item/:itemId/stock

Stock of item with variation

/item/:itemId/variation/:variationId/stock

News
items-stock-api.items-stock-kvs-stream
